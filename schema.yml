openapi: 3.0.3
info:
  title: SOLAR SALES
  version: 0.0.0
paths:
  /orders/{id}/:
    get:
      operationId: orders_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /orders/{id}{format}:
    get:
      operationId: orders_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /orders/{id}/delivered/:
    put:
      operationId: orders_delivered_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /orders/{id}/delivered{format}:
    put:
      operationId: orders_delivered_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /orders/{id}/paid/:
    put:
      operationId: orders_paid_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /orders/{id}/paid{format}:
    put:
      operationId: orders_paid_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /orders/add/:
    post:
      operationId: orders_add_create
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /orders/add{format}:
    post:
      operationId: orders_add_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /orders/all/:
    get:
      operationId: orders_all_retrieve
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /orders/all{format}:
    get:
      operationId: orders_all_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /orders/my/:
    get:
      operationId: orders_my_retrieve
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /orders/my{format}:
    get:
      operationId: orders_my_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /products/:
    get:
      operationId: products_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - products
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
  /products/{id}/:
    get:
      operationId: products_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this product.
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/categories/:
    get:
      operationId: products_categories_list
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
    post:
      operationId: products_categories_create
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /products/categories/{id}/:
    get:
      operationId: products_categories_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    put:
      operationId: products_categories_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: products_categories_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: products_categories_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /products/staff/products/:
    get:
      operationId: products_staff_products_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: products_staff_products_create
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/staff/products/{id}/:
    get:
      operationId: products_staff_products_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this product.
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: products_staff_products_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this product.
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: products_staff_products_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this product.
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: products_staff_products_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this product.
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /users/activate/:
    post:
      operationId: users_activate_create
      tags:
      - users
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /users/logout/:
    post:
      operationId: users_logout_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Logout'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Logout'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Logout'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logout'
          description: ''
  /users/register/customer/:
    post:
      operationId: users_register_customer_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomerRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomerRegistration'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerRegistration'
          description: ''
  /users/register/staff/:
    post:
      operationId: users_register_staff_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StaffRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StaffRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StaffRegistration'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaffRegistration'
          description: ''
  /users/token/:
    post:
      operationId: users_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /users/token/obtain/:
    post:
      operationId: users_token_obtain_create
      tags:
      - users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /users/token/refresh/:
    post:
      operationId: users_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /users/token/verify/:
    post:
      operationId: users_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
components:
  schemas:
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - password
      - token
      - username
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        category_products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          readOnly: true
        name:
          type: string
          maxLength: 100
      required:
      - category_products
      - id
      - name
    CustomerRegistration:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        middle_name:
          type: string
          maxLength: 100
        phone_number:
          type: string
          maxLength: 20
        address:
          type: string
          maxLength: 200
        lga:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 100
        country:
          type: string
          maxLength: 100
        password:
          type: string
          writeOnly: true
          maxLength: 128
        groups:
          type: array
          items:
            type: string
      required:
      - address
      - country
      - lga
      - password
      - phone_number
      - state
    Logout:
      type: object
      properties:
        refresh_token:
          type: string
      required:
      - refresh_token
    PaginatedProductList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PatchedCategory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        category_products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          readOnly: true
        name:
          type: string
          maxLength: 100
    PatchedProduct:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        product_rating:
          type: array
          items:
            $ref: '#/components/schemas/Rating'
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 200
        image:
          type: string
          format: uri
          nullable: true
        brand:
          type: string
          nullable: true
          maxLength: 200
        description:
          type: string
          nullable: true
        rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          nullable: true
        numReviews:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          nullable: true
        countInStock:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        createdAt:
          type: string
          format: date-time
          readOnly: true
        discount:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        category:
          type: integer
          nullable: true
        added_by:
          type: integer
          nullable: true
    Product:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        product_rating:
          type: array
          items:
            $ref: '#/components/schemas/Rating'
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 200
        image:
          type: string
          format: uri
          nullable: true
        brand:
          type: string
          nullable: true
          maxLength: 200
        description:
          type: string
          nullable: true
        rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          nullable: true
        numReviews:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          nullable: true
        countInStock:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        createdAt:
          type: string
          format: date-time
          readOnly: true
        discount:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        category:
          type: integer
          nullable: true
        added_by:
          type: integer
          nullable: true
      required:
      - createdAt
      - id
      - product_rating
    Rating:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          nullable: true
          maxLength: 200
        rating:
          type: integer
          maximum: 10
          minimum: 0
        review:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        product:
          type: string
          nullable: true
        user:
          type: integer
          nullable: true
      required:
      - createdAt
      - id
    StaffRegistration:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        middle_name:
          type: string
          maxLength: 100
        phone_number:
          type: string
          maxLength: 20
        address:
          type: string
          maxLength: 200
        lga:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 100
        country:
          type: string
          maxLength: 100
        password:
          type: string
          writeOnly: true
          maxLength: 128
        groups:
          type: array
          items:
            type: string
      required:
      - address
      - country
      - lga
      - password
      - phone_number
      - state
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
